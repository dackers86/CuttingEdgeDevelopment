//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace MyCarpetsService.Entities
{
    public partial class Product
    {
        #region Primitive Properties
    
        public virtual int Id
        {
            get;
            set;
        }
    
        public virtual int TypeId
        {
            get { return _typeId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_typeId != value)
                    {
                        if (TypesLookup != null && TypesLookup.Id != value)
                        {
                            TypesLookup = null;
                        }
                        _typeId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private int _typeId;
    
        public virtual Nullable<int> RangeId
        {
            get { return _rangeId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_rangeId != value)
                    {
                        if (Range != null && Range.Id != value)
                        {
                            Range = null;
                        }
                        _rangeId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _rangeId;
    
        public virtual Nullable<int> ManufacturerId
        {
            get { return _manufacturerId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_manufacturerId != value)
                    {
                        if (Manufacturer != null && Manufacturer.Id != value)
                        {
                            Manufacturer = null;
                        }
                        _manufacturerId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _manufacturerId;
    
        public virtual int ColourId
        {
            get { return _colourId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_colourId != value)
                    {
                        if (ColoursLookup != null && ColoursLookup.Id != value)
                        {
                            ColoursLookup = null;
                        }
                        _colourId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private int _colourId;
    
        public virtual int MaterialId
        {
            get { return _materialId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_materialId != value)
                    {
                        if (MaterialsLookup != null && MaterialsLookup.Id != value)
                        {
                            MaterialsLookup = null;
                        }
                        _materialId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private int _materialId;
    
        public virtual int StyleId
        {
            get { return _styleId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_styleId != value)
                    {
                        if (StylesLookup != null && StylesLookup.Id != value)
                        {
                            StylesLookup = null;
                        }
                        _styleId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private int _styleId;
    
        public virtual decimal Price
        {
            get;
            set;
        }

        #endregion

        #region Navigation Properties
    
        public virtual Lookup MaterialsLookup
        {
            get { return _materialsLookup; }
            set
            {
                if (!ReferenceEquals(_materialsLookup, value))
                {
                    var previousValue = _materialsLookup;
                    _materialsLookup = value;
                    FixupMaterialsLookup(previousValue);
                }
            }
        }
        private Lookup _materialsLookup;
    
        public virtual Lookup ColoursLookup
        {
            get { return _coloursLookup; }
            set
            {
                if (!ReferenceEquals(_coloursLookup, value))
                {
                    var previousValue = _coloursLookup;
                    _coloursLookup = value;
                    FixupColoursLookup(previousValue);
                }
            }
        }
        private Lookup _coloursLookup;
    
        public virtual Lookup StylesLookup
        {
            get { return _stylesLookup; }
            set
            {
                if (!ReferenceEquals(_stylesLookup, value))
                {
                    var previousValue = _stylesLookup;
                    _stylesLookup = value;
                    FixupStylesLookup(previousValue);
                }
            }
        }
        private Lookup _stylesLookup;
    
        public virtual Lookup TypesLookup
        {
            get { return _typesLookup; }
            set
            {
                if (!ReferenceEquals(_typesLookup, value))
                {
                    var previousValue = _typesLookup;
                    _typesLookup = value;
                    FixupTypesLookup(previousValue);
                }
            }
        }
        private Lookup _typesLookup;
    
        public virtual Manufacturer Manufacturer
        {
            get { return _manufacturer; }
            set
            {
                if (!ReferenceEquals(_manufacturer, value))
                {
                    var previousValue = _manufacturer;
                    _manufacturer = value;
                    FixupManufacturer(previousValue);
                }
            }
        }
        private Manufacturer _manufacturer;
    
        public virtual Range Range
        {
            get { return _range; }
            set
            {
                if (!ReferenceEquals(_range, value))
                {
                    var previousValue = _range;
                    _range = value;
                    FixupRange(previousValue);
                }
            }
        }
        private Range _range;
    
        public virtual ICollection<Width> Widths
        {
            get
            {
                if (_widths == null)
                {
                    var newCollection = new FixupCollection<Width>();
                    newCollection.CollectionChanged += FixupWidths;
                    _widths = newCollection;
                }
                return _widths;
            }
            set
            {
                if (!ReferenceEquals(_widths, value))
                {
                    var previousValue = _widths as FixupCollection<Width>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupWidths;
                    }
                    _widths = value;
                    var newValue = value as FixupCollection<Width>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupWidths;
                    }
                }
            }
        }
        private ICollection<Width> _widths;

        #endregion

        #region Association Fixup
    
        private bool _settingFK = false;
    
        private void FixupMaterialsLookup(Lookup previousValue)
        {
            if (MaterialsLookup != null)
            {
                if (MaterialId != MaterialsLookup.Id)
                {
                    MaterialId = MaterialsLookup.Id;
                }
            }
        }
    
        private void FixupColoursLookup(Lookup previousValue)
        {
            if (ColoursLookup != null)
            {
                if (ColourId != ColoursLookup.Id)
                {
                    ColourId = ColoursLookup.Id;
                }
            }
        }
    
        private void FixupStylesLookup(Lookup previousValue)
        {
            if (StylesLookup != null)
            {
                if (StyleId != StylesLookup.Id)
                {
                    StyleId = StylesLookup.Id;
                }
            }
        }
    
        private void FixupTypesLookup(Lookup previousValue)
        {
            if (TypesLookup != null)
            {
                if (TypeId != TypesLookup.Id)
                {
                    TypeId = TypesLookup.Id;
                }
            }
        }
    
        private void FixupManufacturer(Manufacturer previousValue)
        {
            if (previousValue != null && previousValue.Products.Contains(this))
            {
                previousValue.Products.Remove(this);
            }
    
            if (Manufacturer != null)
            {
                if (!Manufacturer.Products.Contains(this))
                {
                    Manufacturer.Products.Add(this);
                }
                if (ManufacturerId != Manufacturer.Id)
                {
                    ManufacturerId = Manufacturer.Id;
                }
            }
            else if (!_settingFK)
            {
                ManufacturerId = null;
            }
        }
    
        private void FixupRange(Range previousValue)
        {
            if (previousValue != null && previousValue.Products.Contains(this))
            {
                previousValue.Products.Remove(this);
            }
    
            if (Range != null)
            {
                if (!Range.Products.Contains(this))
                {
                    Range.Products.Add(this);
                }
                if (RangeId != Range.Id)
                {
                    RangeId = Range.Id;
                }
            }
            else if (!_settingFK)
            {
                RangeId = null;
            }
        }
    
        private void FixupWidths(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Width item in e.NewItems)
                {
                    item.ProductId = Id;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Width item in e.OldItems)
                {
                }
            }
        }

        #endregion

    }
}
